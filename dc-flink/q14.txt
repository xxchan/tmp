Flink SQL> 
>   EXPLAIN  INSERT INTO tpch_q14
>     select
>       100.00 * sum(case
>         when p_type like 'PROMO%'
>           then l_extendedprice * (1 - l_discount)
>         else 0
>       end) / sum(l_extendedprice * (1 - l_discount))== Abstract Syntax Tree ==
LogicalSink(table=[default_catalog.default_database.tpch_q14], fields=[promo_revenue])
+- LogicalProject(promo_revenue=[CAST(/(*(100.00:DECIMAL(5, 2), $0), $1)):DECIMAL(10, 0)])
   +- LogicalAggregate(group=[{}], agg#0=[SUM($0)], agg#1=[SUM($1)])
      +- LogicalProject($f0=[CASE(LIKE($20, _UTF-16LE'PROMO%'), *($5, -(1, $6)), 0:DECIMAL(22, 0))], $f1=[*($5, -(1, $6))])
         +- LogicalFilter(condition=[AND(=($1, $16), >=($10, 1995-09-01), <($10, +(2099-09-01, 1:INTERVAL MONTH)))])
            +- LogicalJoin(condition=[true], joinType=[inner])
               :- LogicalTableScan(table=[[default_catalog, default_database, lineitem]])
               +- LogicalTableScan(table=[[default_catalog, default_database, part]])

== Optimized Physical Plan ==
Sink(table=[default_catalog.default_database.tpch_q14], fields=[promo_revenue])
+- Calc(select=[CAST(/(*(100.00:DECIMAL(5, 2), $f0), $f1) AS DECIMAL(10, 0)) AS promo_revenue])
   +- GroupAggregate(select=[SUM($f0) AS $f0, SUM($f1) AS $f1])
      +- Exchange(distribution=[single])
         +- Calc(select=[CASE(LIKE(p_type, _UTF-16LE'PROMO%'), *(l_extendedprice, -(1, l_discount)), 0:DECIMAL(22, 0)) AS $f0, *(l_extendedprice, -(1, l_discount)) AS $f1])
            +- Join(joinType=[InnerJoin], where=[=(l_partkey, p_partkey)], select=[l_partkey, l_extendedprice, l_discount, p_partkey, p_type], leftInputSpec=[NoUniqueKey], rightInputSpec=[NoUniqueKey])
               :- Exchange(distribution=[hash[l_partkey]])
               :  +- Calc(select=[l_partkey, l_extendedprice, l_discount], where=[SEARCH(l_shipdate, Sarg[[1995-09-01..2099-10-01)])])
               :     +- TableSourceScan(table=[[default_catalog, default_database, lineitem]], fields=[l_orderkey, l_partkey, l_suppkey, l_linenumber, l_quantity, l_extendedprice, l_discount, l_tax, l_returnflag, l_linestatus, l_shipdate, l_commitdate, l_receiptdate, l_shipinstruct, l_shipmode, l_comment])
               +- Exchange(distribution=[hash[p_partkey]])
                  +- Calc(select=[p_partkey, p_type])
                     +- TableSourceScan(table=[[default_catalog, default_database, part]], fields=[p_partkey, p_name, p_mfgr, p_brand, p_type, p_size, p_container, p_retailprice, p_comment])

== Optimized Execution Plan ==
Sink(table=[default_catalog.default_database.tpch_q14], fields=[promo_revenue])
+- Calc(select=[CAST(((100.00 * $f0) / $f1) AS DECIMAL(10, 0)) AS promo_revenue])
   +- GroupAggregate(select=[SUM($f0) AS $f0, SUM($f1) AS $f1])
      +- Exchange(distribution=[single])
         +- Calc(select=[CASE(LIKE(p_type, 'PROMO%'), (l_extendedprice * (1 - l_discount)), 0) AS $f0, (l_extendedprice * (1 - l_discount)) AS $f1])
            +- Join(joinType=[InnerJoin], where=[(l_partkey = p_partkey)], select=[l_partkey, l_extendedprice, l_discount, p_partkey, p_type], leftInputSpec=[NoUniqueKey], rightInputSpec=[NoUniqueKey])
               :- Exchange(distribution=[hash[l_partkey]])
               :  +- Calc(select=[l_partkey, l_extendedprice, l_discount], where=[SEARCH(l_shipdate, Sarg[[1995-09-01..2099-10-01)])])
               :     +- TableSourceScan(table=[[default_catalog, default_database, lineitem]], fields=[l_orderkey, l_partkey, l_suppkey, l_linenumber, l_quantity, l_extendedprice, l_discount, l_tax, l_returnflag, l_linestatus, l_shipdate, l_commitdate, l_receiptdate, l_shipinstruct, l_shipmode, l_comment])
               +- Exchange(distribution=[hash[p_partkey]])
                  +- Calc(select=[p_partkey, p_type])
                     +- TableSourceScan(table=[[default_catalog, default_database, part]], fields=[p_partkey, p_name, p_mfgr, p_brand, p_type, p_size, p_container, p_retailprice, p_comment])
